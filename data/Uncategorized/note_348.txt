=ab857933-03f7-461c-9e77-c7128d4038f4 PYTHON CODING CHEAT SHEET=320e27b5-8991-49f2-8c85-83763c0054be =8a2c2db1-ad1a-4cde-8a9d-9c252f6c76c8 =4b7c16cb-65e9-41a0-a645-0e86ac562c7d =867ee4e2-b05b-4b0d-ae3e-16feb6d699ed =634e2073-f555-4707-94cc-0fcf1b187114 =3abd1ec8-d76c-4f43-b08f-a831dba9645c  CREATE TABLE celebs (=92da3a6c-e6bc-434e-840c-6238aa9b870b   id INTEGER,=6efccc75-899f-4c74-86f2-a1c19b53a01b   name TEXT,=6eab5972-a363-4cff-aef0-cdc47e58cb4e   age INTEGER=3b8d1a5e-ca8f-4fcf-80fd-23182cbcf185 );=085e3e36-17a7-415f-86a4-539712427ce8 =fc22e9fe-3b0a-48de-8c47-df45e74ad4f6 INSERT INTO celebs (id, name, age)=a11364d3-c09f-4bcf-8632-715f682ee364 VALUES (1, 'Justin Bieber', 22);=4017dcbf-2045-47e3-8fe2-b4c87e24ee33 =46218089-2c62-4187-8632-770681cf1e4c INSERT INTO celebs (id, name, age) =1c4a475c-e67c-4a8f-a9b3-fc53918c1ba2 VALUES (2, 'Beyonce Knowles', 33); =85606e10-ce4b-46ef-bbcd-4efc9827ac82  =c4679785-f6ac-47c6-a080-9253fae74326 INSERT INTO celebs (id, name, age) =38f06c48-31e0-451d-92b4-d5450191ac43 VALUES (3, 'Jeremy Lin', 26); =055a31d8-7f4d-4d29-bfff-065ae1f78c07  =08611498-24ad-4da8-9ea2-d1d651fd335d INSERT INTO celebs (id, name, age) =8defe35f-9a05-4eab-b80a-60e03ab1fe02 VALUES (4, 'Taylor Swift', 26);=d75982c4-7786-4c90-919a-76d2475d86aaTABLE CREATION/EDIT PROCESS=abc558dd-f02e-4d39-8e53-77a1fd124720 =c0ae85e6-2186-4f29-8f97-c7bfed3d0c62 =76779c77-f4d7-46a2-a25c-3e4b7d3eb5e0 INSERT INTO table (col1, col2, col3,col4)=d3e6bfd2-0d4f-4b77-a61e-9de569510804 VALUES=151164b9-03a1-4caa-891f-76588673baea (1, 'Justin Bieber', 22),=755866be-11c2-4245-b65c-184c2635ff21 (2, 'Beyonce Knowles', 33),=fbaa90f2-8e37-426f-b3b0-d77ec1332f7d (3, 'Jeremy Lin', 26)=6272dffc-261d-4ea4-8d6d-73b77228b879 (4,'Taylor Swift',26);=9e1f9110-f404-4c5c-873e-30a15cc50524 =62c23ce9-adee-4d7d-8ad4-962a9dd81772 ALTER Table celebs=882f5c2d-bb4e-43dd-b3e1-89919e09cf5b  Add Column twitter_handle TEXT;=29cc1207-766b-4c4c-a41d-8ef79eba30c6 =486541c8-d780-4614-84a4-2164d4a4add8 SELECT * FROM celebs; =f5eb37f2-4c30-40bc-90a2-68a90c6f551f =30a238ff-08c3-45e4-8da6-d96a3f902934 UPDATE celebs =d7629d45-03a3-4be7-8bee-8828780118f5 SET twitter_handle = '@taylorswift13' =8fc00610-6a24-47c2-b43b-49af83c69f11 WHERE id = 4; =28a63f9b-0659-4040-af90-14d84070b96a  =d25d7a24-eb52-4278-95d8-2cf58e86695f SELECT * FROM celebs;=6f37f757-2f56-49be-b029-d6d12484a7ef =71b1769a-9675-4b82-8ebe-7fe6e8e3e3ca  DELETE FROM celebs=b7d3eed4-553c-4e12-9e33-c41508a2a57b  WHERE twitter_handle IS NULL;=8fd8f325-5161-437f-aadd-57fd232bb0ab =98e73ed9-bbd7-4d9a-826d-3222a27f9ac5  CREATE TABLE celebs (=bfc36a10-bb83-4288-88ec-6201c009b3c6    id INTEGER PRIMARY KEY,=c51c85a6-b7b3-4447-a4a7-3333752d51c4    name TEXT UNIQUE,=046f1a41-a497-431e-a294-ffe5f42eb209    date_of_birth TEXT NOT NULL,=c8977c78-3161-434a-98ac-3e95d1eb532a    date_of_death TEXT DEFAULT 'Not Applicable'=f8633b0b-e8b1-42e5-bc0d-f9cb4868e022 =924647c0-127d-4abb-9b31-6c4b335efa36 CREATE TABLE celebs (=f8f5d5d9-e767-43cc-b9be-e9ef2bc1c05f    id INTEGER PRIMARY KEY, =f5f9319f-1808-48d7-b387-6f527141b78b    name TEXT UNIQUE,=cbbcf894-9e9a-4deb-9b52-e615cc3fe2ce    date_of_birth TEXT NOT NULL,=4fdf6f50-3b42-42a7-b61f-0749e0799716    date_of_death TEXT DEFAULT 'Not Applicable'=5ddc9719-5628-4ba4-ab10-805b86bd5ee4 );=411dff70-92e0-4a69-a897-9cadfa0ca0e8  =ae224eab-37bb-4679-9abc-1c4d1ef13aabCREATE TABLE creates a new table.=1cc60091-fbf9-49a2-a6e1-a2318d47c8e1 INSERT INTO adds a new row to a table.=e44aeeab-8ad9-4cb8-97f8-068289f1f6a8 SELECT queries data from a table.=7b4375f5-58a9-4406-b663-61a9b643e1e0 ALTER TABLE changes an existing table.=bd4acc23-c959-4ac6-8f36-8881d40c5ba2 UPDATE edits a row in a table.=5b810273-ffed-4ffc-b451-d4408978194e DELETE FROM deletes rows from a table.=e3825ec6-e7dc-435a-8493-a8e4edfb2eeb Constraints add information about how a column can be used.=fbb8439b-1e20-4485-ad01-a966298bb24b=5450cd75-43af-4b18-beb5-588d15bdfbaa =56863c62-c79b-4984-8056-a180d0c03a68 =87b1a2b3-29fc-47a1-96e9-0641e02a94b5 =8b1a017e-8605-4e46-b141-343ef205801cQuery Commands=cff49d81-8883-41b0-bda1-87b2921afaae =7ce4e23f-ce08-4fb7-8447-749153d32944 SELECT * FROM movies;=fba2f6a6-8979-4856-abd0-4b610063ab19 =3e43a730-f144-454c-b509-9db1ca9fd775 =0d885207-0384-4dbe-97a1-f238697a967e SELECT column1, column2=2e306df5-b9a3-4360-89e0-c905dd81d6f7 FROM table_name;=0ed21deb-43c1-47de-b775-57b41d667d93 =2d64ab49-0e6a-434e-ae4c-edcb30bd3413 =4c6514ec-7b00-4dc7-92a7-f250d26dcd7e SELECT name, genre =2db1e840-a51e-432e-8573-f21ec4871c17 FROM movies;=b6db3f52-155a-4842-9c72-0d66e98111af =dd82fb8a-6763-4004-a0ef-cf56f9541d43 SELECT name AS 'titles'=f5757577-da94-40ea-a105-2de983ab79e4 FROM movies;=f7885716-f8c9-4512-9c14-a79c5dff64c3 =7837e485-66b0-4517-9654-cd5f237bcd80 SELECT imdb_rating AS 'IMDB'=11fb842a-6e31-400c-9336-348276569f14 FROM movies;=7ec08409-8da2-41e7-872e-9d1c08dcd89c =a9d1915c-b01b-41e2-a23c-bd5ec1f639bb SELECT * =2f3e1ad3-ed8b-4c3e-b5ea-d6d5f5925a8c FROM movies=f19ee05d-0001-410d-95b5-b6ce607c0ded WHERE name LIKE 'Se_en';=862d972f-0370-4116-881c-f0893c3d4a8c =04a72b6d-3142-4059-ae2a-9b7643a386e3LIKE is a special operator used with the WHERE clause to search for a specific pattern in a column.=e3bd3a1a-0eb0-4ecb-a8d6-695c131c1851=a56bffed-a031-4208-91cd-64a49a10c9a9name LIKE 'Se_en' is a condition evaluating the name column for a specific pattern.=8c7dc375-4b4b-4e04-8b65-b3ddb8b052fe=c6772bdc-6047-44e1-a8e5-13c6b92db6d2Se_en represents a pattern with a wildcard character.=c508e3a1-7cef-47ef-b9ba-d5a0ade6fde0=3f67d136-b36c-4100-b391-c3f75e5100f2The _ means you can substitute any individual character here without breaking the pattern. The names Seven and Se7en both match this pattern.=551f9708-bcb8-4856-8465-ec4d48155a7e=a1de3076-97b2-4d7b-a679-9729933994c9 =2bfbc07a-d78c-41f1-b9fe-24235e022b8a SELECT * =6a5208b3-aab2-4b5b-bf81-6a2f9fdfa5b6 FROM movies=884763b6-e75b-4948-a8d9-5ac737e02352 WHERE name LIKE 'A%';=4de6040b-f188-4b91-ae63-011a4c1e5165 =e79e519d-6f66-4c45-a4b8-aff6fbf5f5e0 % is a wildcard character that matches zero or more missing letters in the pattern. For example:=c209b9b7-14bf-4056-a88d-08a3b32d72c2 =b4a559bf-4a1e-42a7-bd40-ee93c8c90cc6A% matches all movies with names that begin with letter ‘A’=f6e467fc-f213-427f-a0e8-fd89c4779ecf %a matches all movies that end with ‘a’=089ba7e8-a66d-4580-93ce-1cb95b704bac We can also use % both before and after a pattern:=0a897d74-564b-4215-bf9b-7701eb7d496f=f20f62c6-7f14-4b5e-a08e-7447fc49e73a SELECT * =800e873e-f0d3-4c3c-919c-e0c65b46ca8a FROM movies =5ae26806-2edc-44d9-bf1d-81d8bf3b6043 WHERE name LIKE '%man%';=c36ac0f5-b48c-4657-ab0e-f08e475f7c08 =28fba67c-df70-4022-a26c-ff5daf0df995 Here, any movie that contains the word ‘man’ in its name will be returned in the result.=9b13f012-3a91-4331-afac-7a157f0c5c64 =f8635cb2-9e9f-4524-991a-98ca1825bceb LIKE is not case sensitive. ‘Batman’ and ‘Man of Steel’ will both appear in the result of the query above.=d82ac274-0f63-4a0f-ab14-76318b7ab7d6 =7a9ce2e6-6ec1-4de6-a2da-146722facc46 The condition should be name LIKE 'The %':=2ad7b943-da67-4ed7-a4c4-d0128125eac8 =9daa3fca-5304-428f-8d4c-4d53e703080b SELECT * =1a5dc035-328f-42c2-9f2c-9828d2d4664b FROM movies=4e99b0a1-ad42-4ee7-a41e-7b231539ccf4 WHERE name LIKE 'The %';=82515c48-f28d-49fc-ba45-3bf0da4a00cd Notice how the % comes after The.=acd1c202-f88a-4a6b-a57e-2125fe2a4338 =3985bc7c-8c68-4b21-9708-c40f45a86e69 There is also a space in between because we don’t want words like ‘There’, ‘They’, etc.=e06509e9-feb2-4cf0-a58e-b9fc04128333 =4ac40126-8336-40c5-b099-d5c0ece1462a SELECT name=6ef05fd1-a28f-42a6-a544-02e1fd339268 FROM movies=37d76ad1-00b7-4468-863c-2c0071f09fb6 WHERE imdb_rating IS NULL;=dc5aa871-3c8f-44c4-8458-518b73f54a7f =07b84a14-74b7-41e6-b782-f866cbe71c9cIS NULL =b06415ca-05ca-4f0c-b938-0d189de24ecf IS NOT NULL=a4ec3ff7-faff-4c3a-9a2d-e008a29d6155you can not use normal query parameters with NULL such as = (equal) != (notr equal to) (keep in mind 0-zero is not considered a NULL)=5c43013d-8027-4a9e-9f3a-b9a1be8404be =5b22f73a-5aa4-447a-b84b-edb2b3d661b1 Between=6c230bde-cf82-479c-81eb-3171e3810746 The BETWEEN operator is used in a WHERE clause to filter the result set within a certain range. It accepts two values that are either numbers, text or dates.=8641c334-4ff7-46c7-bbc1-7d809e5b1d19 =9e3cd246-5230-4398-9d6c-e7d7325dd457 For example, this statement filters the result set to only include movies with years from 1990 up to, and including 1999.=d320b6d9-185a-4248-9a49-8fdc841a2b16 =a4cb10f4-507e-41d9-8d11-b891b6417edc SELECT *=20797fbf-68d3-4d57-b4d3-88fca1c760d7 FROM movies=c5c2c337-a5fc-4652-96ff-22c09742bfff WHERE year BETWEEN 1990 AND 1999;=a62c6bd8-fcfa-486b-8435-827695e3fbd5 When the values are text, BETWEEN filters the result set for within the alphabetical range.=ad8a4209-850e-4023-8729-5c9d7fc057fa =ecb85e84-654c-409d-9c87-4e25ad84ce26 In this statement, BETWEEN filters the result set to only include movies with names that begin with the letter ‘A’ up to, but not including ones that begin with ‘J’.=ab02d1c5-0a81-44c4-b6d3-c6d11185a094 =7f709c4d-597e-4cdb-9b2b-f3a80cc5c39d SELECT *=e7b21336-6d2d-4981-af5b-c871565c6c3a FROM movies=5c4a7caa-9740-4cb2-b87b-8940ad2e5ed6 WHERE name BETWEEN 'A' AND 'J';=f02e5caf-9734-4359-96e9-484a2964b679 However, if a movie has a name of simply ‘J’, it would actually match. This is because BETWEEN goes up to the second value — up to ‘J’. So the movie named ‘J’ would be included in the result set but not ‘Jaws’.=4c045457-1b52-4b0b-b2fb-d69ab1a2c765 =2f219ff3-8e9a-46e9-ab75-a1e1157dcc70 SELECT *=3b2266f6-7b60-45f9-b6ed-723aa41e3b06 FROM movies=f7c9439a-6723-4c35-95db-8f5e60f30bb7 WHERE year BETWEEN '1970' AND '1979';=5676f9e5-a17c-49fe-aa45-8f21f24e2e87 =55680909-ffa1-40b5-ab8c-42fff0c062ec =8adfd69d-1577-458d-8f26-ba74ec64f4e9 SELECT *=4d8a9db5-2462-48e2-a74c-71fd3b93742e FROM movies=8ae8a885-4b28-4a47-9715-93ece1a3bc8b WHERE  genre = 'romance'=cfb2a044-5e09-446d-a4f8-3fa0bd980f61   OR genre = 'comedy';=3e70e949-f550-4fd9-b5c2-c3dc286d4e11 =d3294c6b-aea8-4ca9-b7ff-e9d283112758 =acb17f6d-99bb-4ba7-92aa-1bee8862f184 That’s it with WHERE and its operators. Moving on!=390ee8ee-297a-4a59-951f-ecfaaabf06bf =97d996b9-9721-4269-850d-8e2065126e18 It is often useful to list the data in our result set in a particular order.=caa245da-76d5-4246-ad51-fa1059639e35 =8dce1079-bcdf-4bf0-afe3-38a8ac31c8f0 We can sort the results using ORDER BY, either alphabetically or numerically. Sorting the results often makes the data more useful and easier to analyze.=747927a4-0571-4c3e-9638-b94240001c96 =5e038c59-e5ce-4b7c-a3c9-cb8f94c4fab4 For example, if we want to sort everything by the movie’s title from A through Z:=3649cac2-a790-4867-9b7f-a6129bebade7 =824e9209-3f96-4b5b-9745-448c8a255b32 SELECT *=b4401f95-e1b8-43d4-8285-66419a25310d FROM movies=feb82802-5822-45a1-bf1e-3d1fdf5db3bf ORDER BY name;=33d21d31-dcda-4873-a68e-333056628d31ORDER BY is a clause that indicates you want to sort the result set by a particular column.=64336e3f-bead-4bd7-a3af-73d31ee6e81e=c3d80a02-f623-4302-984c-a1dd670759c6name is the specified column.=9c183951-b4f5-4c8e-afdc-e09fbf783476=c5168ac3-5d45-474a-80b8-3be48610ca79 Sometimes we want to sort things in a decreasing order. For example, if we want to select all of the well-received movies, sorted from highest to lowest by their year:=ad7f0232-4485-487e-9822-4a4cdd0f57c3 =1433bb34-dea9-4f51-bb93-88404a4d0579 SELECT *=f506ce4b-9755-4ff5-bb99-a111da0c1708 FROM movies=9189849d-6274-470d-83e8-24a273231b33 WHERE imdb_rating > 8=d5a72756-1dc1-4000-bf94-ac85e8c80970 ORDER BY year DESC;=089ce666-6a45-4eb7-9ba1-480fa829d45e DESC is a keyword used in ORDER BY to sort the results in descending order (high to low or Z-A).=ffc9f6a0-f235-449a-a2ac-9f46ce8366fb =9b45e658-e41b-4477-a3be-9b861dc6b733ASC is a keyword used in ORDER BY to sort the results in ascending order (low to high or A-Z).=cad2726d-ce57-4d4b-ac5a-b9313349eea8=c77f4441-d0e5-4deb-9941-9db093a448d2The column that we ORDER BY doesn’t even have to be one of the columns that we’re displaying.=ae0f68a3-79f5-47d9-a9ff-8114696e007a=ce61df8b-98ba-47c1-92e7-4b15b6f126a8 Note: ORDER BY always goes after WHERE (if WHERE is present).=52c65510-91a0-469c-962a-9257e90e4057 =60358f72-0ded-4558-b380-48f905aaa754 =d6622522-52f0-49ee-bc01-2b7364251d08 SELECT name, year, imdb_rating=7bec1bf4-a33d-426b-8b16-e8c27ad74b9f FROM movies=ebaf53f6-1a12-4919-ac9c-958f46257d49 ORDER BY imdb_rating DESC;=fc78a5f6-2071-49ee-8140-34a226e6a99f =1394f985-7fd7-448b-a60c-04aa9629381b =cf74a265-d2de-40af-9924-c0e0d19af8b1 LIMIT is a clause that lets you specify the maximum number of rows the result set will have. This saves space on our screen and makes our queries run faster.=a4047dbf-86ff-41ee-a8ef-6411f5b6da79 =0bddb847-40a4-40ff-934c-3a35977db5cc SELECT *=68ca567b-38e7-4bc8-a24e-5da3cf88253d FROM movies=3a09531d-a788-4ad3-b20f-537f4c8d5109 LIMIT 10;=b9fa0a88-f4a8-411f-8f13-de6f97e9920d =db9514ee-6f51-461d-82cf-74406f209ae2 LIMIT always goes at the very end of the query. Also, it is not supported in all SQL databases.=efa3b2fc-a02b-457f-9bda-7de0e7e8937c =7ba38b6e-dce6-4d13-a9c1-69ceeb7fdc18 SELECT *=d98fe07e-22cf-4047-9780-5fd86866e397 FROM movies=5ef71147-ec92-4f97-95e3-cf0c163de177 ORDER BY imdb_rating DESC=01634b77-d70c-441d-8da5-1ae9963fec23 LIMIT 3;=8c1cbbef-4615-4642-ad3e-971e8c97eea8 =4104592c-c2ed-4371-ab4a-1c31dfd8efd3 =05706eff-d868-4140-956d-16c47f7c421b =ff043187-c4bd-47e6-bc10-0318b2493c07 Case=036b9aaa-8813-48ce-84d1-c9216c1427be A CASE statement allows us to create different outputs (usually in the SELECT statement). It is SQL’s way of handling if-then logic.=49f1aad8-c673-4271-90a7-41efcb571ffe =1482103b-567f-4414-80dd-834bb1dbe896 Suppose we want to condense the ratings in movies to three levels:=87c172df-60a6-43f8-9cd4-4a99c5381ccd =7168cc81-d1fb-4f17-8c8c-982501a25d37If the rating is above 8, then it is Fantastic.=44cf2364-7483-427c-a07e-5c91fbb4666c If the rating is above 6, then it is Poorly Received.=deb5cb30-7a99-433b-b372-36f1db022a07 Else, Avoid at All Costs.=d5ccbb29-afd4-4938-a400-8244ce61621a=c6e2e557-3b99-4651-a337-a360c11274bb SELECT name,=1192146f-052f-49bf-ac6a-de85cc497337  CASE=f3c5917c-6b4f-40dc-8677-1e7643878dfd   WHEN imdb_rating > 8 THEN 'Fantastic'=871fb6f5-69b0-4c07-aa1a-2d63c9978dab   WHEN imdb_rating > 6 THEN 'Poorly Received'=e36af29f-be94-4ffd-a7ac-b2cf98afc243   ELSE 'Avoid at All Costs'=d695301a-d393-4761-832a-1034daf43570  END=96e39348-029a-4957-952f-f04bef2573a9 FROM movies;=aad608a8-9d10-4889-b594-9114b114b2d6 =0c5ab177-0ea0-4fff-8008-15ae40ab18ecEach WHEN tests a condition and the following THEN gives us the string if the condition is true.=0f6077db-06ea-45a3-b201-a203f5f03968 The ELSE gives us the string if all the above conditions are false.=c9b9e30a-b472-4084-a9c9-cc4877ed9dd8 The CASE statement must end with END.=bc80bc3f-9b35-44dd-966f-8ecbf36e5936 In the result, you have to scroll right because the column name is very long. To shorten it, we can rename the column to ‘Review’ using AS:=50e55c5a-c3b3-46ce-b19e-0ed2658cc491=2d0e7fb2-39ca-4c6f-9955-5aee62daa577 SELECT name,=a7182f9b-c236-4dd7-8755-e400cf02a1dc  CASE=3152c368-3751-4390-8df5-0cb0925fc3f3   WHEN imdb_rating > 8 THEN 'Fantastic'=5677c5cd-73af-445b-9f02-9e9b28164c49   WHEN imdb_rating > 6 THEN 'Poorly Received'=9beb8f19-624e-449c-804c-a551230473b0   ELSE 'Avoid at All Costs'=d7e62918-c6aa-41f8-b03b-99bc80d412ba  END AS 'Review'=fbef04f7-4d10-4654-8d27-80615376e057 FROM movies;=85900598-a539-49c9-bca3-3e9f4a32bb79 =f5fd667b-237e-4137-b1ef-38bb35ace036 =12b70eb9-dc9d-4ddc-8dc1-2e26dac7e68d SELECT name,=28167a30-c0ef-405f-b063-4e4961480d2a CASE=71cfaf60-017a-4d50-8e3d-ab93e64644fb   WHEN genre = 'romance' THEN 'Chill'=1307038e-f74f-4dae-9e85-17f41fe6e929   WHEN genre = 'comedy' THEN 'Chill' =39e344cc-ba46-4110-a6a0-be8438bac796   ELSE 'Intense'=ab5b31fd-a88e-46d1-9c89-c2738451a18b END AS 'Mood'=b2672e01-9e83-4c62-9b54-f08d03c4f870 FROM movies;=2dd67f83-25c5-4bf7-817b-b72fe005b627 =01c026d0-feae-4415-ba35-7717c46446d8 =b9500b89-ac26-4458-baa0-de8eeb0180d6 Let’s summarize:=f0922bbc-66ce-46e0-afe9-df4a5918e8ff =e862cfd8-1f7c-4fbe-95db-12990f954ebbSELECT is the clause we use every time we want to query information from a database.=63b37b6f-3745-444d-acba-fcb6edc8d3f8AS renames a column or table.=a18a7b10-251a-4c24-90aa-fb642e8873baDISTINCT return unique values.=b4335736-a7a3-44af-a1c5-40b3e3771fa0WHERE is a popular command that lets you filter the results of the query based on conditions that you specify.=9b0e7947-d908-4ee8-9a16-207fe792606cLIKE and BETWEEN are special operators.=8edf4c82-5b1c-4f0a-9fcc-389acad74ba2AND and OR combines multiple conditions.=1402957b-18df-4757-bda4-8064595fe6a2ORDER BY sorts the result.=b52f7776-9f5b-41cf-81a0-be496c45e33dLIMIT specifies the maximum number of rows that the query will return.=0523ee2a-a92e-479b-880b-2ca2e90a1952CASE creates different outputs.=49d22cab-e8d5-4ab7-979b-1e443999d6e3=5bd00964-2abd-4547-bc24-d8433e642e93 =cc3b728f-06c9-4ff6-a845-6c2b7d888ffe =cf1cb2c9-22e7-416d-97f8-c296b2041661 =3ece8222-a337-4453-a31b-49a71c28d70aAGGREGATE FUNCTIONS=bbce96f1-be0d-466d-99c3-1e6d020dd34e Introduction=d0e93518-ca88-4b83-aa1d-0a93679dc656 We’ve learned how to write queries to retrieve information from the database. Now, we are going to learn how to perform calculations using SQL.=2eccef80-2742-4d11-bc45-6ad9de843aae =c1d6e64d-9634-468f-adc0-de580b72e09b Calculations performed on multiple rows of a table are called aggregates.=0f4eff09-b1db-4aaa-86c6-a09d4a556bab =99b9db67-5f24-4692-a85e-704ffca10b87 In this lesson, we have given you a table named fake_apps which is made up of fake mobile applications data.=e29d3382-cc08-4f8f-96cb-c4f49b39ca2c =3d0f6d51-d2b0-4183-a92a-cd83d023fd42 Here is a quick preview of some important aggregates that we will cover in the next five exercises:=a3083249-ec98-496b-a799-510709b78d9d =f4f82761-5b31-4dfb-9f59-8f0c9e20f8cb COUNT(): count the number of rows=ccdb32e4-b1be-4b88-a86d-c57d04ee27f8 SUM(): the sum of the values in a column=8af9fc09-52fc-43ec-acec-c1935eba816b MAX()/MIN(): the largest/smallest value=bebbb845-8687-4cc8-98e4-58201e293f70 AVG(): the average of the values in a column=25b7c273-6a6b-4a31-aa1f-cf952dbf3b0a ROUND(): round the values in the column=d1b55950-439b-4e0d-a185-dd5ec446ec4e Let’s get started!=36452bdc-1c1e-40e0-b8f7-f44f962a2dd8 =2fd9e993-769e-47ec-bcb2-34985c8f4626 Instructions=7bbc110d-7a16-4c3e-8939-8376a75c80f3 1.=5bda2dab-384a-40c5-b49a-08653f39a740 Before getting started, take a look at the data in the fake_apps table.=b4caf5d9-6f44-4861-8dc0-fce02164b670 =9a06fc48-57a2-4ba5-87a5-112448bdfd6e In the code editor, type the following:=b6fecb0d-7a43-48e7-8606-e282aac2d1ab =3ac248b0-7f86-4383-9424-a2d415e5b698 SELECT *=08f8f356-92c0-479e-9894-334ced95bdd6 FROM fake_apps;=f4770dcb-3ff1-499f-97f6-0f8b0deed6d7 =cba7b3a3-33f1-48c4-9c76-53e871265ec6 =7f69d4bf-f061-4832-a75a-657b2432b5d7 SELECT COUNT(*)=b252801e-833c-4bd2-8c63-1d69a28cab0d FROM fake_apps=bb95ddbb-cef5-4844-a9a6-aa05fe03ae30 WHERE price =0; =ff1264dd-a7f2-4a74-a82b-8115c70a9811 =909540be-bce5-4511-ad5f-d2f170b5c00a =3251f487-f21a-4ef3-8cc4-f86df78ce11d SELECT SUM(downloads)=3a9de649-76aa-4256-b084-355431745109 FROM fake_apps;=3c794f68-bb0d-4800-8903-1dd6187b3604 =57960e51-676e-42dd-8057-a105872ce39c SELECT MIN(downloads)=d5e57c3f-741b-4280-8eec-2545a8a1cb22 FROM fake_apps;=37fb0ab8-320a-4761-b7c1-0685e7b155d9 =ee894e92-23f3-43fa-98b1-37d75e8320d7 SELECT AVG(downloads)=508ddd92-6a6f-451d-9ea9-bcb78b1f8c7c FROM fake_apps;=7c51aa01-8f57-4988-836d-c3b1163f493d =7b45bf61-a0b0-4f2e-8bfa-f6c1d17c6447 SELECT AVG(price)=3bb19c97-f11a-445c-a289-3de4503f29db FROM fake_apps;=ec948201-8478-4f5e-a9f3-5ec6e584ae77 =52365815-c6b7-4c5d-b13f-5d35f4134333 =a58bfe68-7ca5-4bcc-983d-6ab9f7310e9c SELECT ROUND (AVG(price), 2)=eb67b901-ad2c-4322-86c1-a2570c6a0bf3 FROM fake_apps;=462c4087-d9eb-4a13-be1f-d0d697fb699c =0fee2d3d-13e0-41a2-b4bf-453c9d72d758 =2f372667-83ab-4269-ae67-df76f42156da You can treat AVG(price) just like any other value and place it inside the ROUND function like so:=718912cf-d0d4-4bac-a037-1be8896c53b5 =affa1ba3-4674-47b1-bea0-038f3a2c17fb ROUND(AVG(price), 2)=9a4d1264-b309-4373-8cdb-819bc1e41ce6 Here, AVG(price) is the 1st argument and 2 is the 2nd argument because we want to round it to two decimal places:=d8ba84c3-12f6-4806-984f-0834950148a7 =174bd2c3-fad4-4bdd-8df1-5fe27cee85ab SELECT ROUND(AVG(price), 2)=45168df7-24bd-4960-a090-8709cc816372 FROM fake_apps;=8bc9f562-f850-438a-b5ef-9b586623332d =17360aef-40c4-4ab5-9a2b-51376ce25b80 =8bca5f2f-4ad8-4957-84c7-63de5506d4f6 Group By I=fa1742ba-c604-4e17-9dfb-c7613a110b83 Oftentimes, we will want to calculate an aggregate for data with certain characteristics.=1752831e-6fec-46d6-85f7-3860319171e4 =9a864ec0-572d-4da9-9f97-799d0ca249cc For instance, we might want to know the mean IMDb ratings for all movies each year. We could calculate each number by a series of queries with different WHERE statements, like so:=dcdc414a-9628-4798-9031-a01b20f13036 =97ce6e3a-5a77-42c3-85ba-f440684e7d80 SELECT AVG(imdb_rating)=ea0c5c3c-8a95-4824-a388-9bc7867b337c FROM movies=29dce651-5afd-4cab-9c8f-a3e203667daf WHERE year = 1999;=e426cced-a049-4c16-ab4a-c9885e9d9f6f  =36a7ceb4-88cc-439a-9362-e624ec58f2ff SELECT AVG(imdb_rating)=b6591ff7-b2e5-4284-b458-be81d268b893 FROM movies=a2d345bc-ceed-4fbd-bd08-8e23f8f20e16 WHERE year = 2000;=2fe1d885-17de-4f3f-855f-f96c62bf935d  =d00855e8-3e85-4ff9-986d-6c00ea854762 SELECT AVG(imdb_rating)=c59f3b04-47e5-4985-be21-f3eff72cc762 FROM movies=c2660f33-1e58-4e1f-811e-1216743a2113 WHERE year = 2001;=08bbcc36-aedc-4d5e-b367-b3da2d7be4b4 and so on.=df7af171-abeb-49c5-b721-62319a543d68 =1e46dbe4-e824-4039-9d15-5afed418b01e Luckily, there’s a better way!=6a1142d5-23dc-4582-8545-911018870225 =af5861e1-bf6e-40f1-836a-9eb77d4d3b0d We can use GROUP BY to do this in a single step:=2814d281-a221-4cdd-9a1c-1764ecca15e8 =2cb387bd-49fa-40cf-8a15-e1dcdce057c2 SELECT year,=bcecccf5-d7a4-4d5f-898c-1f2c9a524b8b    AVG(imdb_rating)=174717c5-06f0-4a35-992c-fc2b64340796 FROM movies=1b3163c1-65f8-4c6e-a191-50946a7f98ac GROUP BY year=7eb9cf7e-a9a8-4311-8cb7-7dc6b5dbe83d ORDER BY year;=7b43e327-25df-444b-a8fa-4fa1aa415808 GROUP BY is a clause in SQL that is used with aggregate functions. It is used in collaboration with the SELECT statement to arrange identical data into groups.=cc9c75bf-301e-499f-be4a-93d77a3136a3 =91cd2ba6-f3a1-499b-b8b5-1ac4bd5f7824 The GROUP BY statement comes after any WHERE statements, but before ORDER BY or LIMIT.=b8e180a0-b2fd-4e22-897b-c300045b7e12 =bc9ecb49-1134-4e4a-b04d-58291cfb991e SELECT category, SUM(downloads)=88cccd96-17fa-4e3b-ba1f-bb1c54ab12b3 FROM fake_apps=ebb0e6d4-7e13-4902-b0ca-8414a36076d8 GROUP BY category;=6c5d5022-2e8d-42ec-aff6-4e619b8a8c64 =7ce46522-67b5-43e9-aa05-4cf9d7db37f4 =fc016ccd-4593-437b-beb7-6e4e8671d7c7 SELECT ROUND(imdb_rating),=49853bec-e617-461c-a537-d7749aa9d8bc    COUNT(name)=ce529f30-3500-41a7-b01f-40470012dae7 FROM movies=11ee1738-5623-417b-bc66-6447b2ecbb17 GROUP BY ROUND(imdb_rating)=ad92047c-9fda-4901-acf9-cb267e126c30 ORDER BY ROUND(imdb_rating);=629dc6ed-228e-4355-81de-9830ece70c40 =7787b72d-4607-4f72-9ba8-e47f9e4012ff However, this query may be time-consuming to write and more prone to error.=ace1bb5f-f6ee-4e73-a34a-c39820100571 =a961547b-a3e2-4b0b-a07d-f84c9a025ca9 SQL lets us use column reference(s) in our GROUP BY that will make our lives easier.=f5ce6101-cc0b-4c3e-8f41-08a162991cd1 =6680a533-77c4-41c6-a3e2-178035862cbb 1 is the first column selected=267320cd-91f2-4c4a-8f2c-a57d08136534 2 is the second column selected=a484cdc0-a84f-4b43-9c74-aa4ad4993bcc 3 is the third column selected=852978f4-d620-4788-ac8c-b42a8d2bfd02 and so on.=bf700054-70ba-4bee-a81d-817c198f5f95 =79a5f50a-7f97-46d2-976e-834554477bcf The following query is equivalent to the one above:=9fbd2ee4-0681-4ce9-97ac-25e2c2c62c3a =e59fec5e-28ee-4b8e-9827-8f29f65a9def SELECT ROUND(imdb_rating),=3b3caf85-eaf7-4b4d-9f15-8ab38f9f1ca9    COUNT(name)=de7c3931-3300-4cc4-b1e8-687b0c902066 FROM movies=665d122a-c83e-4c9c-9acc-3710134c1d75 GROUP BY 1=f1f07e08-e810-4c25-81bc-bcc62dab5127 ORDER BY 1;=187bf698-eac7-4173-ba1c-61fa57bc8a4a Here, the 1 refers to the first column in our SELECT statement, ROUND(imdb_rating).=00b3c4b4-d3e1-42c1-b972-802c3ce52748 =5d338f96-f7c7-487b-8340-b277db968d22 =4bbffc10-524c-43a9-8808-ddd4e82d7012These numbers represent the selected columns:=8b944f1f-c1ff-4be1-8959-d42e3661e3dd =f164b4c6-1552-4824-a335-542b1842615d1 refers to category.=9b79e58a-e352-468e-abb9-c30a3311ed792 refers to price.=5038b2ee-1d90-48b4-906d-37f4399379b63 refers to AVG(downloads)=53a862a9-8a4d-4420-8a92-979e11a31754 Now, change the GROUP BY with numbers:=c4bc12e4-5021-4e80-a81e-ccf38bcaf320 =cef733e1-921b-48d3-8e96-acbe30796f9c SELECT category, =02beda98-97be-4393-bb0b-a3d508e774ea    price,=2cf4b82c-f7a3-4db5-b497-d1840842d297    AVG(downloads)=c7284ffb-71cf-4e50-ba7e-f2d90c1457e3 FROM fake_apps=12d9dda2-890b-4859-b75b-bd1b619c4033GROUP BY 1, 2;=bcf080f4-8ade-47a5-8707-e170d78ce3fd Note: Even if you use column names instead of numbers, it will still be correct because these two queries are exactly the same! (GROUP BY category, price)=5cea1d94-43d7-4a15-8823-67fc234d2f62 =466f7b76-01c4-48c0-a38e-26f7b504280b =d0459314-3ea2-49e8-9d44-7203baf04c81 Having=485fde98-808c-4dbb-af1d-a3cc8944deea In addition to being able to group data using GROUP BY, SQL also allows you to filter which groups to include and which to exclude.=729edd17-25c0-47e8-b1e7-a282c79ee9b5 =3b3115a7-b1a7-4eee-a919-5f0c6b0ad6d1 For instance, imagine that we want to see how many movies of different genres were produced each year, but we only care about years and genres with at least 10 movies.=372a6c9a-6a3c-4a5a-abd1-e21637ce250b =259253a9-fda7-48d8-96a6-31715d71e663 We can’t use WHERE here because we don’t want to filter the rows; we want to filter groups.=51f9966a-abad-4314-926b-f4ae78bf4fa1 =74b9a86e-4190-4adb-8484-0ae4d193b20a This is where HAVING comes in.=6e6546b6-90fb-4874-add8-8ee901d3536e =0acb5447-58fa-46ca-b590-41a5005a4b46 HAVING is very similar to WHERE. In fact, all types of WHERE clauses you learned about thus far can be used with HAVING.=2b0e8b4c-8c24-43b0-bb58-ee8d581bee7d =da33542d-d37b-44d1-9009-b23a88a804a7 We can use the following for the problem:=47f4a535-520a-4cb5-8e32-be3cedb1c564 =fb163082-8fde-46fd-b66a-21e163c29249 SELECT year,=506c110e-94bb-4dde-be4b-8bc0074eeb44    genre,=3a4d785f-750d-49c7-bb07-49738ac04ae3    COUNT(name)=2b004d05-f403-4e41-a342-283035c7b311 FROM movies=d37444ba-2da8-4563-9933-7bc8fa83c7cd GROUP BY 1, 2=956c7c81-ce18-4a80-b4df-e3c485697741 HAVING COUNT(name) > 10;=77abd950-5bab-442a-a1e6-672afc9c41cb =52407ef9-2e61-4902-8ea0-040ad7d97d9fWhen we want to limit the results of a query based on values of the individual rows, use WHERE.=864bd813-0068-4641-935a-e65a1f6b4081 When we want to limit the results of a query based on an aggregate property, use HAVING.=8d26a4de-993a-4759-91ad-bdd6b695fd52HAVING statement always comes after GROUP BY, but before ORDER BY and LIMIT.=aa5dabe0-dde5-48a9-9600-85949bcf50fa =52366a2a-b24e-4583-aba2-e8530b93ffd0 =3ef733da-93be-4adf-a91a-0f2d2862bdef =e6e42430-b155-45e6-a670-7ae25ac4f296 =01c18eb3-9933-4108-a541-09c68aeb3ed1 SELECT price, =d3dc04e4-12aa-489b-9d6d-2f48c3b9e9b1    ROUND(AVG(downloads)),=fc9830cd-616d-494e-bffa-ab5a3542a1c8    COUNT(*)=c6d5b4ac-95b3-46a9-8b0a-7ab9490950c6 FROM fake_apps=ed66a0e6-bed3-4523-b434-31619dbdbc15 GROUP BY price=b283d166-8269-4608-9882-44e1dd18a22c HAVING COUNT(*) > 10;=37db25c9-abb5-4d3d-b567-fa7123ded509 =968e64bd-d29b-4e73-9d3f-2f6d1350907b =7379422a-78df-433a-8653-8201206746ce You just learned how to use aggregate functions to perform calculations on your data. What can we generalize so far?=078d1952-6ce5-4447-a185-4038af2503af =7331d371-057d-40c5-91bb-e2293a1d5bdbCOUNT(): count the number of rows=5b933121-a2d7-49bb-9c8f-3694fb8ff5fc SUM(): the sum of the values in a column=5f4b20c5-b6db-44a6-9c41-3a3c59e654e5 MAX()/MIN(): the largest/smallest value=ec4edd6a-4e73-4a69-96cb-94dd2cb4eb5c AVG(): the average of the values in a column=a203c250-4f77-4af0-be99-ab557fe7d276 ROUND(): round the values in the column=70d4c8c3-1bf8-4c78-b012-6418a1af6248=d46b1a47-4888-4d3b-b455-ae81732d1f9e Aggregate functions combine multiple rows together to form a single value of more meaningful information.=22f0d744-6bfe-4119-8f6d-1e93fdcdb8d2 =6d590e81-1462-4819-aec2-602c1f244ec9GROUP BY is a clause used with aggregate functions to combine data from one or more columns.=3abc7bee-52e3-4c64-b115-570e70bf7387 HAVING limit the results of a query based on an aggregate property.=95219465-2900-4d8c-a71f-15e6288ece95=539e0bbc-de83-43cc-bb1c-000b5dc0107f =19efd3d1-e777-4217-8340-c09b112bcdf1 =2f62273c-3c44-4087-b30f-a963e0b92a13 =857752b1-7e81-4cad-af73-82f61785caefMULTIPLE TABLES=c7357465-af00-4eaf-9e58-2101d352dc03Introduction=2a5defef-36e1-4f77-b4e5-38b8d5fa6305 In order to efficiently store data, we often spread related information across multiple tables.=1edc3082-8579-4982-8174-3f7bc9809982 =f4f76652-7dab-411d-8591-bdb45f068bbf For instance, imagine that we’re running a magazine company where users can have different types of subscriptions to different products. Different subscriptions might have many different properties. Each customer would also have lots of associated information.=9fb436c3-9765-4c1f-8bfa-1452b6553ca1 =0d6e6dbf-86fd-4af4-b023-b057032aaea6 We could have one table with all of the following information:=c6233795-9621-4d7a-bad1-e99c96e3a2c3 =96e6f11a-7371-46cb-adc7-4ce999c60bd1order_id=22c70f0d-fd9a-46fc-baf3-1dade47be4ae customer_id=eb9d858b-2942-402b-971a-c469bf605b71 customer_name=6d50422a-363c-4cd5-ba46-bffe633e7960 customer_address=b173d506-bced-434b-a3ec-1b3083dea689 subscription_id=1fff136f-dab4-4e43-bc59-d2d58874b77e subscription_description=774131d0-8f5e-474b-b90a-ff8430b85994 subscription_monthly_price=00c744ac-b34d-4d8a-837c-c5d997a4a63e subscription_length=96daa8fd-1cb2-4228-8dcc-6c2ddc6f26f4 purchase_date=83877b8f-ade1-4078-9467-ed5c533ffc7d=3974df15-ab8e-4f05-86ed-a30322465b16 However, a lot of this information would be repeated. If the same customer has multiple subscriptions, that customer’s name and address will be reported multiple times. If the same subscription type is ordered by multiple customers, then the subscription price and subscription description will be repeated. This will make our table big and unmanageable.=41b61397-a132-498e-9d45-5f44b837e815 =12119232-dd8e-48e5-986f-76fdd7974951 So instead, we can split our data into three tables:=d2ed072c-a0ff-4db8-9229-eb69ae7586f0 =60099316-7cde-4f6c-912e-8dfcc5f0d87a 1. orders would contain just the information necessary to describe what was ordered:=edb8f53b-371a-4279-ba71-62cd56d8305a =abf88d73-dbb2-412c-a1eb-5a338d901ed7order_id, customer_id, subscription_id, purchase_date=a943758f-8d39-4bbe-9830-97947f78b5a02. subscriptions would contain the information to describe each type of subscription:=6a7fbc7d-cd94-42a7-a4ee-cb1fec22f8ee =66f7ae1b-eded-42b0-b10f-7d2eb07afc47subscription_id, description, price_per_month, subscription_length=fd42f97a-0841-4cd8-b9ff-4b02c4cd95113. customers would contain the information for each customer:=8e9fb385-bd5c-4b2e-a584-858f87406caa =8ce03795-dddc-4808-b5ab-c0dacb3f7fcdcustomer_id, customer_name, address=5b1ca002-a327-4c2e-bfa8-b33545833996In this lesson, we’ll learn the SQL commands that will help us work with data that is stored in multiple tables.=fbe84235-8bc4-4eb9-964d-ea1ea773458f =37934c09-3397-4492-af11-959ef3a47fe8 Instructions=0c2facb7-ca75-4a45-b449-393fd57fe5c7 1.=81b8e85c-4668-42bb-bd02-c54d5def38ee Examine these tables by pasting the following code into the editor:=dfb6fc1a-023c-45c0-a8b5-794721e5f1e0 =ed7fc87c-1d2c-43d0-8d8f-968b6d42654d SELECT *=7b6c30fc-cfd8-48bd-957f-5674465c5f8b FROM orders=dd2e99ca-a0ca-4733-b2f0-dcb8acf68aaa LIMIT 5;=4d7976d2-b712-4b75-92ac-4c9d03d0474e  =c2e46918-e57d-4f43-8648-eb833d67b382 SELECT *=7b4edf8a-3749-493e-b35a-db91e45bfc70 FROM subscriptions=fd774129-9a5a-4a53-8b56-7af2debcf1bc LIMIT 5;=21d774a7-2035-4420-96ad-f1246e2f0d9a  =c9505584-519f-4946-9846-24e19614e401 SELECT * =26c17356-b5bf-4eef-af98-4ea0eef5d2e7 FROM customers=6405d79d-b6f2-44b0-a96c-889f0b71fc51 LIMIT 5;=17b21df4-dd98-41fe-ad36-f0c6f93978a9 =f9a31904-5a62-448f-b82a-30713d09f837 =de538d00-2107-4884-b73f-1088d942dc8f MULTIPLE TABLES=e60fa252-0f36-46a9-9211-df4781b3b42e Combining Tables Manually=c14a8653-00a5-401b-a662-ff54c30642c0 Let’s return to our magazine company. Suppose we have the three tables described in the previous exercise – shown in the browser on the right (we are going to try something new!):=1eb394dd-4f18-4a84-aecf-63599c90b7c4 =0987f262-2903-4dbc-bd0a-a0fdb163e00c orders=1eeab6ae-81ba-4844-91c3-8163513b805d subscriptions=f8c02f06-5b04-4e8e-a61a-7d8f850968cc customers=500151fc-bb4d-4d83-8e9f-5f323044fa4e If we just look at the orders table, we can’t really tell what’s happened in each order. However, if we refer to the other tables, we can get a complete picture.=6517d7aa-a43a-4758-b233-e033e925b41b =36965902-5882-40d3-a6cc-986b51b4d591 Let’s examine the order with an order_id of 2. It was purchased by the customer with a customer_id of 2.=12ece847-32f6-4fd7-80e2-fc05b75b79d9 =8abd916a-7cb8-4fb2-9b15-4306ee612120 To find out the customer’s name, we look at the customers table and look for the item with a customer_id value of 2. We can see that Customer 2’s name is ‘Jane Doe’ and that she lives at ‘456 Park Ave’.=73142971-04da-41af-88be-02d91c864f90 =c00d2358-ddd0-4a7d-90a5-8e9eef4d6e22 Doing this kind of matching is called joining two tables.=81ded6fb-b15a-43eb-9639-73d4d0322d73 =3f6c016c-49ed-4534-9a26-ac76a166aee2 Instructions=1cafb87b-2547-432c-b229-01d4147110b6 1.=e4d1e37f-f7f3-4934-a872-ca11012572af Using the tables displayed, what is the description of the magazine ordered in order_id 1?=308a99c5-a107-41ae-a14f-cee47e5f47ac =80a4ff72-2a21-4f88-b61a-37a3a84fa278 Type your answer on line 1 of the code editor.=6fe43211-4639-44b6-8f33-01d2b185a3a8 =bbf137fb-47a4-4f03-9dc4-455cad88102d Be sure to capitalize it the same as in the table.=e84b3161-026e-4a7a-8041-8dedbb55b321 =1e583f56-483b-4194-b0a3-50f2c1ec8971 =1f403999-d403-418a-a8a8-98d18c5cec56 =66468223-8b83-4000-9bd8-6409f67e450a =e48d2a74-16d9-41db-bdc2-1e764c5cf4ef MULTIPLE TABLES=4cd949b6-e17f-4f64-90cf-cd8619670530 Combining Tables with SQL=05f7bfdc-c28c-4e61-a1a9-c4da0c25a5b7 Combining tables manually is time-consuming. Luckily, SQL gives us an easy sequence for this: it’s called a JOIN.=6ad4fbf0-152b-4717-8580-77a7c71f1e88 =52878b4d-d7a9-4f39-a020-1a936677b05f If we want to combine orders and customers, we would type:=f749097a-a404-4d43-b6ba-f2a4f74a9552 =1e7f6da6-3863-4b8b-9e8e-df3b946dc497 SELECT *=b19d9f2c-c61a-4d5b-a2b2-efed98dfffa1 FROM orders=97f4e63a-6a91-472c-8298-b3d23c0de650 JOIN customers=11acc946-2de2-4eb7-aaab-309d3265c77a   ON orders.customer_id = customers.customer_id;=2358dcee-f80c-4362-a88b-4ea19b11e8be Let’s break down this command:=1207ad4c-00cd-4d1d-95ca-e83d91583663 =4541aab7-1216-4bde-a383-8193872e1de9 The first line selects all columns from our combined table. If we only want to select certain columns, we can specify which ones we want.=20c357ef-1b0c-4be0-94d3-cd65903e1438 The second line specifies the first table that we want to look in, orders=538efa83-f763-4b37-80ef-afef8f049c2a The third line uses JOIN to say that we want to combine information from orders with customers.=cf610b68-c744-42d7-baee-8ee0a3d9f5f8 The fourth line tells us how to combine the two tables. We want to match orders table’s customer_id column with customers table’s customer_id column.=2d79b5df-45cb-4b77-943e-baf5309afc4c Because column names are often repeated across multiple tables, we use the syntax table_name.column_name to be sure that our requests for columns are unambiguous. In our example, we use this syntax in the ON statement, but we will also use it in the SELECT or any other statement where we refer to column names.=ea40f92e-1ddc-42df-9287-46aa980945ec =313d91b8-e853-498f-8745-025bc6e446e9 For example: Instead of selecting all the columns using *, if we only wanted to select orders table’s order_id column and customers table’s customer_name column, we could use the following query:=7e28b570-21cd-4c5e-8c83-cf5c386f6dc1 =82fdb1e4-ebab-4c0f-be02-a925c56f1ccd SELECT orders.order_id,=e38698f0-f764-481c-bb26-668ecd2124f4    customers.customer_name=71173638-3142-44cd-b113-1049aaecad88 FROM orders=6f22bcd4-1102-4d64-99ca-96aa914ea510 JOIN customers=5c163656-ddda-42f7-aba5-ef58ce1032d3   ON orders.customer_id = customers.customer_id;=b4a9f161-aa90-4c7d-bd94-21d62a49bf57 =c1e4f794-1087-4bbf-8639-13921c3eb3a9 =5d93fb06-baee-4d35-bfb3-b2dff68399d5 =a1e7df40-6e4a-48c5-8fa3-fdcd1f5f7faa =5a73c286-9b83-4e78-8ece-ed32810810e8 =ebb97e0e-a33b-44ac-adc6-8f0a51e8705a =32a84ed5-8098-469c-bc07-230160555e2e =e25a183e-0437-4c18-874a-732084bfd32b =34ca38f7-c25e-46df-b80a-b703bbf934c5 =116d717f-cabf-4404-8917-69f45e72700f =58d4243c-fc93-425a-bcb9-5af65aed00cd =66d02bdd-fe10-49e7-b331-855e56cbc5ed =8e20fc4c-c9f1-45c4-95fe-6f7e48fee46a =42e52044-6c16-4231-b083-4bbf0f96cbf4